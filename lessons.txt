Invoke A Function
  lesson: Functions can be called just like in JavaScript
    alert('Hi');
    nickname = prompt('What is your nickname?');
    console.log('1 + 1 = ' + 2);

  lesson: Uneccessary punctuation marks can be skipped
    alert 'Hi'
    nickname = prompt 'What is your nickname?'
    console.log 'Hi ' + nickname

  lesson: Parenthesis can be used wherever it adds readability
    (alert 'Hi')
    nickname = (prompt 'What is your nickname?')
    (console.log nickname)

    alert('Hi')
    nickname = prompt('What is your nickname?')    
    console.log(nickname)

  lesson: A line of code can be read from right to left to understand it better
   console.log 'Hi ' + prompt 'What is your nickname?'




Create Your Own Function
  lesson: the dash rocket symbol -> indicates a function signature
    add = (x,y)-> {
      return x+y
    }
    console.log '1 + 1 =' + add 1, 1
    console.log '1 + 1 =' + add(1, 1)
    * use 2 spaces to indent the body of the function
    * use the editor to write a function called sub that subtracts 2 numbers
    * use the console to invoke sub(5,3)

  lesson: you can skip uneccesary punctuation marks
    add = (x,y)-> 
      return x+y
    console.log add 5, 6
    * using indentation replaces the need to use { }
  lesson: functions automatically return the value of the last expression
    add = (x,y)->
      x+y
    sub = (x,y)-> x-y

    console.log add 8, 8
    console.log sub 5, 3


variables
  lesson: Variables do not need to be declared as a 'var'
    length = 5
    cost = 8.85
    username = 'underwater.crystals'
    password = "Ins3cur3"
    friends = ['Rob', 'Chris', 'Travis', 'Lane', 'Amanda']
    colorTheme = { textColor: 'dark gray', buttonColor: 'blue', backgroundColor: 'white' }

  lesson: Variables can be used from inside a string
    itemCount = 4
    cost = 77.88
    total = "Total cost of #{itemCount} items comes out to $#{cost}"
    console.log total
    * use double quotes for interpolating variables in strings







Hashes
  lesson: Hashes don't need the curly brackets
    colorTheme = textColor: 'dark gray', buttonColor: 'blue', backgroundColor: 'white'
    console.log colorTheme

  lesson: A hash can be specified on multiple lines using indentation
    colorTheme =
      textColor: 'dark gray'
      buttonColor: 'blue'
      backgroundColor: 'white'

    console.log colorTheme

  lesson: Variables can be used as a shortcut to specify hash key and value
    textColor = 'dark gray'
    buttonColor = 'blue'
    backgroundColor = 'white'
    colorTheme = { textColor, buttonColor, backgroundColor } 
    console.log colorTheme

Conditional Love
  lesson: The full if statement, without punctuation
    if hour > 17
      time = 'night'
    else
      time = 'day
    * use indentation to specify the body of the if/else clauses

  lesson: the same-line if statement
    time = 'day'
    time = 'night' if hour > 17

  lesson: use then for 1-line if statement
    time = if hour > 17 then 'night' else 'day'

  lesson: Its safer to use is and isnt
    time = 'noon' if hour is 12

  lesson: Ranges can be usefull
    time = 'dawn' if 6 <= hour < 9

  lesson: Flip things around with unless
    time = 'morning' unless hour > 12


  lesson: every expression actually returns something
  lesson: 

existential Question
Loops
Classes


# Primitive, var none
x = 3
console.log(x)

# Integer
# Float
# String
# Boolean
# undefined
# null

# Smooth Operators

# scope it out
 - modules

# hash rocket science

# What's this @?

# [ A, r, r, r, r, r, a, y, s ]

x = [1,2,3,4,5]
console.log(x)

# some conditional Love
x = 7 if 5 > 3
console.log(x)

x = 8 if 4 is 2*2
console.log(x)

x = 9 unless 4 is 2*2
console.log(x)

x = if(5 is 2*2) then 10 else 11
console.log x

# Calling a Function
console.log('message 1')
console.log 'message 2'
(console.log 'message 3')

# Defining a Function
# add = function(a,b){ return a+b; };
add = (a,b)-> a+b
x = add 1, 7
console.log x

sub = (a,b)->
  a-b
x = (sub 9,1)
console.log x

p = (msg)-> console.log "\n---:\n", msg

(p 'message')

# The Existential Question
x = if y? then 2 else 0
console.log x

x = mult?(5,5)
console.log x

# what happens if you try:
# x = mult(5,5)

x = add?(5,5)
console.log x

# Loops
p 'loops'
x = [1,2,3,4,5]
p i for i in x

# Smart Loops
p 'smart loops'
x = [1,2,3,4,5]
p i for i in x when 0 is i % 2

# Comprehensions
x = [1,2,3,4,5]
a = (i-1 for i in x)
p a

# Hash
funGames = 
  board:
    chess: false
    checkers: true
  ball:
    baseball: true 
    basketball: true
  other:
    fishing: false

p funGames



# doing it with class

class Shape
  constructor: (len, wid)-> 
    @length = len || 0
    @width = wid || 0

  area: ()-> @length * @width

s = new Shape 3,5 
p s.area()
p s.circumference?()

class Rectangle extends Shape
  constructor: (@length, @width) ->

r = new Shape 4,5 
p r.area()


class Square extends Rectangle
  constructor: (@side)-> (super @side, @side)

s = new Shape 5,5 
p s.area()
